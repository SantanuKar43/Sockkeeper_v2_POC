---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sockkeeper-config
data:
  config.yml: |
    logging:
      level: INFO
      loggers:
        sockkeeper: INFO

    server:
      applicationConnectors:
        - type: http
          port: 8888
      adminConnectors:
        - type: http
          port: 8889
    
    env: docker
    localEnvHostname: sk-node-0
    hostLivenessTTLInSeconds: 5
    hostLivenessPeriodInSeconds: 2
    hostLivenessInitialDelayInSeconds: 2
    userHeartbeatTTLInSeconds: 15
    messageTTLInSeconds: 45
    sidelineTTLInSeconds: 600
    mainReconsumeDelayTimeInSeconds: 15
    sidelineReconsumeDelayTimeInSeconds: 15

    kafka:
      servers: host.docker.internal:9092

    zk:
      connectionString: host.docker.internal:2181
      connectionTimeout: 15000
      sessionTimeout: 1000
      retryBaseSleepTime: 10000
      maxRetry: 3

    pulsar:
      serviceUrl: pulsar://host.docker.internal:6650
      adminUrl: http://host.docker.internal:8080

    redis:
      host: host.docker.internal
      port: 6379

    sideline-topic: sockkeeper-sideline

---
apiVersion: v1
kind: Service
metadata:
  name: sockkeeper-headless
spec:
  clusterIP: None
  selector:
    app: sockkeeper
  ports:
    - name: http
      port: 80
      targetPort: 8888

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sk-node
spec:
  serviceName: sockkeeper-headless
  replicas: 2
  selector:
    matchLabels:
      app: sockkeeper
  template:
    metadata:
      labels:
        app: sockkeeper
    spec:
      containers:
        - name: sockkeeper
          image: sockkeeper
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8888
            - containerPort: 8889
          volumeMounts:
            - name: config-volume
              mountPath: /app/config.yml
              subPath: config.yml
          resources:
            requests:
              memory: "512Mi"
              cpu: "1"
            limits:
              memory: "512Mi"
              cpu: "1"
      volumes:
        - name: config-volume
          configMap:
            name: sockkeeper-config

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: haproxy-config
data:
  haproxy.cfg: |
    global
      log stdout format raw local0
      maxconn 50000
    
    defaults
      log global
      mode http
      option httplog
      option dontlognull
      timeout connect 100s
      timeout client 15m  # 15 min for regular HTTP
      timeout server 15m  # 15 min for regular HTTP
      timeout tunnel 24h  # 24 hours for WebSocket tunnels
    
    frontend http_front
      bind *:80
      default_backend sockkeeper_back
    
    resolvers kube-dns
      nameserver dns1 kube-dns.kube-system.svc.cluster.local:53
      hold valid 5s
      resolve_retries 3
    
    backend sockkeeper_back
      balance leastconn
      option http-server-close
      option forwardfor
      timeout tunnel 24h  # WebSockets stay open for 24 hours
      timeout queue 15m
      timeout connect 100s
      server sk-node-0 sk-node-0.sockkeeper-headless.default.svc.cluster.local:8888 check resolvers kube-dns resolve-prefer ipv4
      server sk-node-1 sk-node-1.sockkeeper-headless.default.svc.cluster.local:8888 check resolvers kube-dns resolve-prefer ipv4
    
    frontend stats
      mode http
      bind *:8404
      stats enable
      stats uri /stats
      stats refresh 5s
      stats admin if LOCALHOST

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: haproxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: haproxy
  template:
    metadata:
      labels:
        app: haproxy
    spec:
      containers:
        - name: haproxy
          image: haproxy:latest
          command: ["haproxy", "-f", "/usr/local/etc/haproxy/haproxy.cfg"]
          volumeMounts:
            - name: config-volume
              mountPath: /usr/local/etc/haproxy/haproxy.cfg
              subPath: haproxy.cfg
          resources:
            requests:
              memory: "256Mi"
              cpu: "250m"
            limits:
              memory: "512Mi"
              cpu: "500m"
      volumes:
        - name: config-volume
          configMap:
            name: haproxy-config

---
apiVersion: v1
kind: Service
metadata:
  name: haproxy-service
spec:
  selector:
    app: haproxy
  ports:
    - name: elb
      protocol: TCP
      port: 8181   # Change from 80 to avoid conflicts
      targetPort: 80
    - name: stat
      protocol: TCP
      port: 8404
      targetPort: 8404
  type: LoadBalancer
